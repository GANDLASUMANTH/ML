# -*- coding: utf-8 -*-
"""covid 19_india

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ptgv5fdA4zbn0ornLOKPQ0T562tPmoG1
"""

import numpy as np  # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt  # Visualization 
import seaborn as sns

# Loading the covid-19 india date-wise record
df=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/covid_19_india.csv")

# Overviewing the data before modifications
df.head()

df.info()

# Checking for any null values
df.isnull().sum()

# Dropping the columns which are not going to be used

df.drop(["Sno","Time","ConfirmedIndianNational","ConfirmedForeignNational"],inplace=True,axis=1)

#finding the active cases

df['Active_cases']=df['Confirmed']-(df['Cured']+df['Deaths'])

df.head()

df.tail(3)

df.shape

df['State/UnionTerritory'].unique()

len(df['State/UnionTerritory'].unique())

import datetime as datetime

df['Date']=pd.to_datetime(df['Date'], format='%Y-%m-%d')
df.set_index('Date',inplace=True)

"""Task: Predict the number of new cases each day from March 26th to April 30th when the country was under lockdown."""

df.loc['2020-03-26':'2020-04-30'].sum()

#To analyze the active cases on daily basis, we need to resample the data on daily basis.

df_day=df['Active_cases'].resample('D').sum()

# After resampling we will be able to find the total number of active cases in India
df_day

# Number of active cases from March 26 to April 30

df_day.loc['2020-03-26':'2020-04-30']

df_day.loc['2020-03-26':'2020-04-30'].sum()

"""State wise analysis"""

median_states=df[df['State/UnionTerritory'].isin(['Kerala', 'Telengana', 'Delhi', 'Rajasthan', 'Uttar Pradesh',
       'Haryana', 'Ladakh', 'Tamil Nadu', 'Karnataka', 'Maharashtra',
       'Punjab', 'Jammu and Kashmir', 'Andhra Pradesh', 'Uttarakhand',
       'Odisha', 'Puducherry', 'West Bengal', 'Chhattisgarh',
       'Chandigarh', 'Gujarat', 'Himachal Pradesh', 'Madhya Pradesh',
       'Bihar', 'Manipur', 'Mizoram', 'Andaman and Nicobar Islands',
       'Goa', 'Unassigned', 'Assam', 'Jharkhand', 'Arunachal Pradesh',
       'Tripura', 'Nagaland', 'Meghalaya',
       'Dadra and Nagar Haveli and Daman and Diu',
       'Cases being reassigned to states', 'Sikkim', 'Daman & Diu',
       'Lakshadweep', 'Telangana', 'Dadra and Nagar Haveli'])]
median_states.groupby(by=['State/UnionTerritory']).median().style.bar(['Active_cases'])

"""Above data shows Maharastra has more number of active cases."""

states=['Kerala', 'Telengana', 'Delhi', 'Rajasthan', 'Uttar Pradesh',
       'Haryana', 'Ladakh', 'Tamil Nadu', 'Karnataka', 'Maharashtra',
       'Punjab', 'Jammu and Kashmir', 'Andhra Pradesh', 'Uttarakhand',
       'Odisha', 'Puducherry', 'West Bengal', 'Chhattisgarh',
       'Chandigarh', 'Gujarat', 'Himachal Pradesh', 'Madhya Pradesh',
       'Bihar', 'Manipur', 'Mizoram', 'Andaman and Nicobar Islands',
       'Goa', 'Unassigned', 'Assam', 'Jharkhand', 'Arunachal Pradesh',
       'Tripura', 'Nagaland', 'Meghalaya',
       'Dadra and Nagar Haveli and Daman and Diu',
       'Cases being reassigned to states', 'Sikkim', 'Daman & Diu',
       'Lakshadweep', 'Telangana', 'Dadra and Nagar Haveli']

count=[[]]
for j in states:
  mh_count=df[df['State/UnionTerritory']==j]
  daily=[]
  daily.append(0)
  for i in range(1, len(mh_count)):
    daily.append(mh_count['Confirmed'].iloc[i]-mh_count['Confirmed'].iloc[i-1])
  mh_count['Daily']=daily
  count.append(mh_count)

count=np.array(count)

# State wise daily cases till {2021-06-08} 

count

"""visualization"""

df1=df.groupby('Date')[['Cured','Deaths','Confirmed']].sum()

plt.title('Observed Cases')
plt.xlabel('Date')
plt.ylabel('Number of cases')
plt.plot(df1.index,df1['Confirmed'],linewidth=3,label='Confirmed',color='black')
plt.plot(df1.index,df1['Cured'],linewidth=3,label='Cured',color='green')
plt.plot(df1.index,df1['Deaths'],linewidth=3,label='Death',color='red')
plt.legend()

"""Prediction"""

from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.naive_bayes import GaussianNB 
from sklearn.model_selection import train_test_split

lbl=LabelEncoder()
tree=DecisionTreeRegressor()
nb=GaussianNB()
linear=LinearRegression()
df['State/UnionTerritory']=lbl.fit_transform(df['State/UnionTerritory'])

x=df[['State/UnionTerritory','Cured','Deaths']]
y=df['Confirmed']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

tree.fit(x_train,y_train)
linear.fit(x_train,y_train)
nb.fit(x_train,y_train)

from sklearn.metrics import r2_score
prediction1=tree.predict(x_test)
score1=r2_score(y_test,prediction)
score1

prediction2=linear.predict(x_test)
score2=r2_score(y_test,prediction)
score2

prediction3=nb.predict(x_test)
score3=r2_score(y_test,prediction)
score3

scores=[score1,score2,score3]
models=['DecisionTreeRegressor','LinearRegression','GaussianNB']
plt.title('Comparing Accuracy of different models')
plt.xlabel('models')
plt.ylabel('Accuracy')
plt.bar(models,scores,color=['red','blue','green'],alpha=0.5,linewidth=3,edgecolor='black')

"""Both LinearRegression and DecisionTreeRegressor models gave 99.3% Accuracy """
